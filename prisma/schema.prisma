generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticators Authenticator[]
  savedCourses  Course[]  @relation("SavedCourses")
  createdCourses Course[]  @relation("CreatedCourses")

  isAdmin      Boolean   @default(false)
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String
  isFree      Boolean
  category    String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  episodes    Episode[] @relation("CourseEpisodes")

  savedBy     User[]   @relation("SavedCourses")
  
  createdById String
  createdBy   User     @relation("CreatedCourses", fields: [createdById], references: [id])
}

model Episode {
  id          String   @id @default(uuid())
  title       String
  description String
  videoUrl    String
  courseId    String
  course      Course   @relation("CourseEpisodes", fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
}